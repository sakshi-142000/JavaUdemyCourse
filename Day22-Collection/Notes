key differences** between `ArrayList`, `LinkedList`, and `Vector` ‚Äî including internal structure, performance, threading, method-specifics, and interface hierarchy.

---

## ‚úÖ Interface Hierarchy Recap

Yes, you're correct:

```
Collection (interface)
   ‚îî‚îÄ‚îÄ List (interface)
          ‚îú‚îÄ‚îÄ ArrayList (class)
          ‚îú‚îÄ‚îÄ LinkedList (class)
          ‚îî‚îÄ‚îÄ Vector (class)
```

---

## üîÅ Common Ground

All three (`ArrayList`, `LinkedList`, and `Vector`):

* Implement the **`List` interface**
* Maintain **insertion order**
* Allow **duplicates**
* Provide **random access** using `.get(index)`
* Allow `null` elements

---

## üîç Key Differences Table

| Feature                         | `ArrayList`             | `LinkedList`                        | `Vector`                      |
| ------------------------------- | ----------------------- | ----------------------------------- | ----------------------------- |
| **Underlying Structure**        | Dynamic array           | Doubly linked list                  | Dynamic array                 |
| **Access (get/set)**            | ‚úÖ Fast (O(1))           | ‚ùå Slower (O(n))                     | ‚úÖ Fast (O(1))                 |
| **Insertion/Deletion**          | ‚ùå Slow at middle (O(n)) | ‚úÖ Fast at head/tail (O(1))          | ‚ùå Slow at middle (O(n))       |
| **Thread Safety**               | ‚ùå Not thread-safe       | ‚ùå Not thread-safe                   | ‚úÖ Thread-safe (synchronized)  |
| **Performance (single-thread)** | ‚úÖ Better                | ‚úÖ Better for frequent insert/delete | ‚ùå Slower due to sync overhead |
| **Growth**                      | Grows by 50% (Java 8+)  | Dynamic nodes                       | Doubles capacity              |
| **Legacy?**                     | Modern                  | Modern                              | ‚úÖ Legacy (since Java 1.0)     |
| **Use case**                    | Frequent random access  | Frequent insert/delete at ends      | Multithreaded legacy code     |

---


### üî∏ `ArrayList`:

* Backed by a **resizable array**
* Inserting/removing in the middle requires **shifting** elements
* Initial capacity is `10`; grows by \~50% when full

### üî∏ `LinkedList`:

* Backed by **doubly linked nodes**
* Every node holds: `value`, `next`, and `prev`
* Efficient insertion/deletion at beginning or middle
* Inefficient random access ‚Äî must **traverse nodes**

### üî∏ `Vector`:

* Similar to `ArrayList`, but **synchronized**
* Every method like `add()`, `get()`, etc. is **thread-safe**
* Grows by **doubling** its size
* Slower in **single-threaded** environments due to sync overhead

---

## üß™ Method-Specific Differences

### ‚úÖ Methods unique to `LinkedList` (because it also implements `Deque`):

```java
addFirst(), addLast()
removeFirst(), removeLast()
getFirst(), getLast()
offer(), poll(), peek()
```

### ‚úÖ Methods unique to `Vector`:

```java
addElement(E obj)
removeElement(Object obj)
elements()   // Returns Enumeration (old version of Iterator)
capacity()   // Returns current capacity
ensureCapacity(int minCapacity)
```

> ‚ö†Ô∏è `Vector` is considered **outdated** ‚Äî for thread-safe lists, prefer `Collections.synchronizedList(new ArrayList<>())` or `CopyOnWriteArrayList`.

---

## üß™ Mini Code Examples to Show Behavior

```java
List<String> arrayList = new ArrayList<>();
arrayList.add("A");
System.out.println(arrayList.get(0)); // O(1) access

LinkedList<String> linkedList = new LinkedList<>();
linkedList.addFirst("Start");
linkedList.addLast("End");
System.out.println(linkedList.removeFirst()); // O(1) remove

Vector<Integer> vector = new Vector<>();
vector.add(100);
vector.addElement(200);
System.out.println(vector.capacity()); // Capacity handling
```

---

## üß© When to Use What?

| Scenario                           | Best Option                                                |
| ---------------------------------- | ---------------------------------------------------------- |
| Fast random access                 | `ArrayList`                                                |
| Frequent add/remove at ends/middle | `LinkedList`                                               |
| Thread-safe legacy support         | `Vector`                                                   |
| Thread-safe modern list            | `Collections.synchronizedList()` or `CopyOnWriteArrayList` |

---

